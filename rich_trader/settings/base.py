"""
Django settings for rich_trader project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

import dj_database_url
import dotenv

from firebase_admin import credentials
import firebase_admin


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

dotenv.read_dotenv(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-)fo36l*+#9#ng=@a&g!u*^c^42qgz(ka1%8$m73hp++91y+x#*"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

DJANGO_SETTINGS_MODULE = os.getenv("DJANGO_SETTINGS_MODULE", "rich_trader.settings.local")
PROJECT_NAME, *_, ENV = DJANGO_SETTINGS_MODULE.split(".")

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "django_json_widget",
    "simple_history",
    "rich",
    "accounts",
    "trading",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "rich_trader.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.jinja2.Jinja2",
        "DIRS": [
            BASE_DIR / "rich_trader" / "jinja2",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "environment": "rich_trader.jinja2.environment",
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "rich_trader.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASE_URL = os.getenv("DATABASE_URL")
USE_DB_URL = bool(ENV != "test" and os.getenv("USE_DB_URL") == "1" and DATABASE_URL)

if USE_DB_URL:
    default_db = dj_database_url.parse(DATABASE_URL)

    # PostgreSQL인 경우 connection pooling 설정 추가
    if default_db["ENGINE"] == "django.db.backends.postgresql":
        default_db["OPTIONS"] = default_db.get("OPTIONS", {})
        default_db["OPTIONS"]["pool"] = {
            "min_size": 4,
            "max_size": 20,
            "timeout": 10,
        }
else:
    tmp_dir = BASE_DIR / "tmp"
    os.makedirs(tmp_dir, exist_ok=True)
    default_db = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": tmp_dir / "db.sqlite3",
    }

DATABASES = {"default": default_db}
print({k: v for k, v in DATABASES["default"].items() if k != "PASSWORD"})


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "accounts.User"

SECURE_CROSS_ORIGIN_OPENER_POLICY = "same-origin-allow-popups"

# Firebase 설정 추가
FIREBASE_CONFIG = {
    "apiKey": os.getenv("FIREBASE_API_KEY"),
    "authDomain": os.getenv("FIREBASE_AUTH_DOMAIN"),
    "projectId": os.getenv("FIREBASE_PROJECT_ID"),
    "storageBucket": os.getenv("FIREBASE_STORAGE_BUCKET"),
    "messagingSenderId": os.getenv("FIREBASE_MESSAGING_SENDER_ID"),
    "appId": os.getenv("FIREBASE_APP_ID"),
    "measurementId": os.getenv("FIREBASE_MEASUREMENT_ID"),
}

# firebase
firebase_cert_path = BASE_DIR / "credentials/firebase_service_account.json"
if ENV != "test":
    if not firebase_cert_path.exists():
        raise FileNotFoundError(f"Firebase service account file required: {firebase_cert_path}")

    cred = credentials.Certificate(firebase_cert_path)
    firebase_admin.initialize_app(cred)
